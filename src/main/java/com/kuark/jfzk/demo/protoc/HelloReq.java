/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.kuark.jfzk.demo.protoc;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** 打个招呼啊 */
@org.apache.avro.specific.AvroGenerated
public class HelloReq extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
    private static final long serialVersionUID = -7310642160197635909L;
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"HelloReq\",\"namespace\":\"com.kuark.jfzk.demo.protoc\",\"doc\":\"打个招呼啊\",\"fields\":[{\"name\":\"who\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    private static SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<HelloReq> ENCODER =
            new BinaryMessageEncoder<HelloReq>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<HelloReq> DECODER =
            new BinaryMessageDecoder<HelloReq>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     */
    public static BinaryMessageDecoder<HelloReq> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     */
    public static BinaryMessageDecoder<HelloReq> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<HelloReq>(MODEL$, SCHEMA$, resolver);
    }

    /** Serializes this HelloReq to a ByteBuffer. */
    public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
        return ENCODER.encode(this);
    }

    /** Deserializes a HelloReq from a ByteBuffer. */
    public static HelloReq fromByteBuffer(
            java.nio.ByteBuffer b) throws java.io.IOException {
        return DECODER.decode(b);
    }

    @Deprecated
    public java.lang.String who;

    /**
     * Default constructor.  Note that this does not initialize fields
     * to their default values from the schema.  If that is desired then
     * one should use <code>newBuilder()</code>.
     */
    public HelloReq() {
    }

    /**
     * All-args constructor.
     * @param who The new value for who
     */
    public HelloReq(java.lang.String who) {
        this.who = who;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not JZCli.
    public java.lang.Object get(int field$) {
        switch (field$) {
            case 0:
                return who;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader.  Applications should not JZCli.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
            case 0:
                who = (java.lang.String) value$;
                break;
            default:
                throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'who' field.
     * @return The value of the 'who' field.
     */
    public java.lang.String getWho() {
        return who;
    }

    /**
     * Sets the value of the 'who' field.
     * @param value the value to set.
     */
    public void setWho(java.lang.String value) {
        this.who = value;
    }

    /**
     * Creates a new HelloReq RecordBuilder.
     * @return A new HelloReq RecordBuilder
     */
    public static com.kuark.jfzk.demo.protoc.HelloReq.Builder newBuilder() {
        return new com.kuark.jfzk.demo.protoc.HelloReq.Builder();
    }

    /**
     * Creates a new HelloReq RecordBuilder by copying an existing Builder.
     * @param other The existing builder to copy.
     * @return A new HelloReq RecordBuilder
     */
    public static com.kuark.jfzk.demo.protoc.HelloReq.Builder newBuilder(com.kuark.jfzk.demo.protoc.HelloReq.Builder other) {
        return new com.kuark.jfzk.demo.protoc.HelloReq.Builder(other);
    }

    /**
     * Creates a new HelloReq RecordBuilder by copying an existing HelloReq instance.
     * @param other The existing instance to copy.
     * @return A new HelloReq RecordBuilder
     */
    public static com.kuark.jfzk.demo.protoc.HelloReq.Builder newBuilder(com.kuark.jfzk.demo.protoc.HelloReq other) {
        return new com.kuark.jfzk.demo.protoc.HelloReq.Builder(other);
    }

    /**
     * RecordBuilder for HelloReq instances.
     */
    public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<HelloReq>
            implements org.apache.avro.data.RecordBuilder<HelloReq> {

        private java.lang.String who;

        /** Creates a new Builder */
        private Builder() {
            super(SCHEMA$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         * @param other The existing Builder to copy.
         */
        private Builder(com.kuark.jfzk.demo.protoc.HelloReq.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.who)) {
                this.who = data().deepCopy(fields()[0].schema(), other.who);
                fieldSetFlags()[0] = true;
            }
        }

        /**
         * Creates a Builder by copying an existing HelloReq instance
         * @param other The existing instance to copy.
         */
        private Builder(com.kuark.jfzk.demo.protoc.HelloReq other) {
            super(SCHEMA$);
            if (isValidValue(fields()[0], other.who)) {
                this.who = data().deepCopy(fields()[0].schema(), other.who);
                fieldSetFlags()[0] = true;
            }
        }

        /**
         * Gets the value of the 'who' field.
         * @return The value.
         */
        public java.lang.String getWho() {
            return who;
        }

        /**
         * Sets the value of the 'who' field.
         * @param value The value of 'who'.
         * @return This builder.
         */
        public com.kuark.jfzk.demo.protoc.HelloReq.Builder setWho(java.lang.String value) {
            validate(fields()[0], value);
            this.who = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'who' field has been set.
         * @return True if the 'who' field has been set, false otherwise.
         */
        public boolean hasWho() {
            return fieldSetFlags()[0];
        }


        /**
         * Clears the value of the 'who' field.
         * @return This builder.
         */
        public com.kuark.jfzk.demo.protoc.HelloReq.Builder clearWho() {
            who = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        @Override
        @SuppressWarnings("unchecked")
        public HelloReq build() {
            try {
                HelloReq record = new HelloReq();
                record.who = fieldSetFlags()[0] ? this.who : (java.lang.String) defaultValue(fields()[0]);
                return record;
            } catch (java.lang.Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumWriter<HelloReq>
            WRITER$ = (org.apache.avro.io.DatumWriter<HelloReq>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(java.io.ObjectOutput out)
            throws java.io.IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final org.apache.avro.io.DatumReader<HelloReq>
            READER$ = (org.apache.avro.io.DatumReader<HelloReq>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(java.io.ObjectInput in)
            throws java.io.IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

}
